#!/bin/sh

# set -eux

# Assume that traffics are routed through this VPN host
# redirect packets that are from $src_addrs to $dest_addr to the container
src_addrs='10.8.0.4 10.112.100.1'
dest_addr=140.112.145.153
container_name=ntu-no-type-username-proxy-1


new_chain() {
    sudo iptables -t nat -N "$@"
}

flush_chain() {
    sudo iptables -t nat -F "$@"
}

clean_chain() {
    new_chain "$@" >/dev/null 2>&1 || flush_chain "$@"
}

add_rule() {
    if ! sudo iptables -t nat -C "$@" >/dev/null 2>&1; then
        sudo iptables -t nat -A "$@"
    fi
}

show_rules() {
    sudo iptables-save -t nat
}


container_addr="$(docker inspect "$container_name" |
    jq -r '.[].NetworkSettings.Networks[].IPAddress')"
container_ports="$(docker inspect "$container_name" |
    jq -r '.[].NetworkSettings.Ports | to_entries | map(select(.value != null)) | from_entries | keys[]')"

tundev=$(sudo sh -c "cat /proc/$(pidof openvpn)/fdinfo/* | grep -Eo 'tun[0-9]+'")
wandev=$(ip route show default | sed -En 's/^.*dev (\w+).*$/\1/p')

clean_chain VPNPROXY

for addr in $src_addrs; do
    add_rule PREROUTING -s $addr/32 -i $tundev -j VPNPROXY
done

for port in $container_ports; do
    portno=${port%/*}
    prot=${port#*/}
    if [ "$prot" != tcp ]; then
        continue
    fi

    # redirect dest_addr:portno -> container_addr:portno
    add_rule VPNPROXY -d $dest_addr/32 -p tcp -m tcp --dport "$portno" \
        -j DNAT --to-destination "${container_addr}:${portno}"
done

# do NAT masquerade on client's LANs that are included in VPN
lans="$(sudo grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+' /var/log/openvpn/openvpn-status.log)"
for net in $lans; do
    add_rule POSTROUTING -s $net -o $wandev -j MASQUERADE
done

show_rules
